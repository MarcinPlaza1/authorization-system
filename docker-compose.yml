services:
  app:
    build: .
    container_name: fastapi_app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/fastapi_db
      - SECRET_KEY=${SECRET_KEY}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_SERVER=${MAIL_SERVER}
      - BASE_URL=${BASE_URL}
      - PROMETHEUS_METRICS=true
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
      - mailhog
    networks:
      - app-network
      - monitoring
    restart: unless-stopped

  mailhog:
    image: axllent/mailpit:latest
    platform: linux/arm64
    container_name: mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - app-network
      - monitoring
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-test-db.sh:/docker-entrypoint-initdb.d/init-test-db.sh
    ports:
      - "5433:5432"

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
      - monitoring
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./alertmanager/templates:/etc/alertmanager/templates
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    depends_on:
      - mailhog
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-polystat-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - monitoring
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    platform: linux/arm64
    container_name: node-exporter
    command:
      - '--path.procfs=/proc'
      - '--path.sysfs=/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.filesystem.fs-types-exclude=^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$'
      - '--collector.disable-defaults'
      - '--collector.cpu'
      - '--collector.loadavg'
      - '--collector.meminfo'
      - '--collector.netstat'
    networks:
      - monitoring
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
    depends_on:
      - redis
    restart: unless-stopped

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@db:5432/postgres?sslmode=disable
    volumes:
      - ./postgres_exporter.yml:/postgres_exporter.yml
    command:
      - "--extend.query-path=/postgres_exporter.yml"
    ports:
      - "9187:9187"
    networks:
      - monitoring
      - app-network
    depends_on:
      - db
    restart: unless-stopped

  tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - ENVIRONMENT=testing
      - TEST_DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/test_fastapi
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - .:/app
    command: pytest tests/ -v --cov=app --cov-report=term-missing

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  redis_data:
  alertmanager_data:

networks:
  app-network:
    driver: bridge
  monitoring:
    driver: bridge 